{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMyklpUu1L4HOT8M0ogVJkv",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Klaosj/Data-analyst-Portfilio/blob/main/project%3A%20remote%20work%20health%20impact%202025%20.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "TolRMcJwgoue",
        "collapsed": true,
        "outputId": "f8f25268-fcb7-4026-a117-b2bbaaf8f802",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-597364038.py:9: DeprecationWarning: Use dataset_load() instead of load_dataset(). load_dataset() will be removed in a future version.\n",
            "  df = kagglehub.load_dataset(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading from https://www.kaggle.com/api/v1/datasets/download/pratyushpuri/remote-work-health-impact-survey-2025?dataset_version_number=1&file_name=post_pandemic_remote_work_health_impact_2025.csv...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 373k/373k [00:00<00:00, 3.10MB/s]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import plotly.express as px\n",
        "import tabulate as tb\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import heapq\n",
        "import kagglehub\n",
        "from kagglehub import KaggleDatasetAdapter\n",
        "df = kagglehub.load_dataset(\n",
        "  KaggleDatasetAdapter.PANDAS,\n",
        "  \"pratyushpuri/remote-work-health-impact-survey-2025\",\n",
        "  \"post_pandemic_remote_work_health_impact_2025.csv\",)\n",
        "df1 = pd.DataFrame(df)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Cleaning Null data**"
      ],
      "metadata": {
        "id": "ctqqV3DjUIkY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_nan = df1.isnull().sum()\n",
        "print(df_nan)\n",
        "\n",
        "df1['Mental_Health_Status'] = df1['Mental_Health_Status'].fillna('good')\n",
        "df1['Physical_Health_Issues'] = df1['Physical_Health_Issues'].fillna('No Issuse')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "XsICs9RqPn8j",
        "outputId": "1eb290b2-e0dd-432f-8f49-71ac0db6fc68"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Survey_Date                  0\n",
            "Age                          0\n",
            "Gender                       0\n",
            "Region                       0\n",
            "Industry                     0\n",
            "Job_Role                     0\n",
            "Work_Arrangement             0\n",
            "Hours_Per_Week               0\n",
            "Mental_Health_Status       799\n",
            "Burnout_Level                0\n",
            "Work_Life_Balance_Score      0\n",
            "Physical_Health_Issues     280\n",
            "Social_Isolation_Score       0\n",
            "Salary_Range                 0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Add range salary and Burnout level**"
      ],
      "metadata": {
        "id": "BbHKlO1gUkq1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "salary_map = {\n",
        "    \"$40K-60K\": \"Entry Level\",\n",
        "    \"$60K-80K\": \"Mid Level\",\n",
        "    \"$80K-100K\": \"Upper Mid Level\",\n",
        "    \"$100K-120K\": \"Senior Level\",\n",
        "    \"$120K+\": \"Executive / Leadership\"\n",
        "}\n",
        "df1[\"Salary_Category\"] = df1[\"Salary_Range\"].map(salary_map)\n",
        "\n",
        "burnout_map = {\n",
        "    \"Low\":1,\n",
        "    \"Medium\" : 2,\n",
        "    \"High\": 3\n",
        "}\n",
        "df1[\"Burnout_Level\"] = df1[\"Burnout_Level\"].map(burnout_map)\n",
        "\n"
      ],
      "metadata": {
        "collapsed": true,
        "id": "mPVxvvYOU7e_"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "round(df1.groupby('Industry')['Burnout_Level'].mean(), 2)\n",
        "df1.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "collapsed": true,
        "id": "x2NA6E9Cb1sn",
        "outputId": "65dd0cbb-9288-4069-9cef-fad5f98956c8"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Survey_Date  Age  Gender         Region               Industry  \\\n",
              "0  2025-06-01   27  Female           Asia  Professional Services   \n",
              "1  2025-06-01   37  Female           Asia  Professional Services   \n",
              "2  2025-06-01   32  Female         Africa              Education   \n",
              "3  2025-06-01   40  Female         Europe              Education   \n",
              "4  2025-06-01   30    Male  South America          Manufacturing   \n",
              "\n",
              "           Job_Role Work_Arrangement  Hours_Per_Week Mental_Health_Status  \\\n",
              "0      Data Analyst           Onsite              64      Stress Disorder   \n",
              "1      Data Analyst           Onsite              37      Stress Disorder   \n",
              "2  Business Analyst           Onsite              36                 ADHD   \n",
              "3      Data Analyst           Onsite              63                 ADHD   \n",
              "4   DevOps Engineer           Hybrid              65                 good   \n",
              "\n",
              "   Burnout_Level  Work_Life_Balance_Score     Physical_Health_Issues  \\\n",
              "0              3                        3   Shoulder Pain; Neck Pain   \n",
              "1              3                        4                  Back Pain   \n",
              "2              3                        3  Shoulder Pain; Eye Strain   \n",
              "3              2                        1  Shoulder Pain; Eye Strain   \n",
              "4              2                        5                  No Issuse   \n",
              "\n",
              "   Social_Isolation_Score Salary_Range  Salary_Category  \n",
              "0                       2     $40K-60K      Entry Level  \n",
              "1                       2    $80K-100K  Upper Mid Level  \n",
              "2                       2    $80K-100K  Upper Mid Level  \n",
              "3                       2     $60K-80K        Mid Level  \n",
              "4                       4     $60K-80K        Mid Level  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ec894ec2-2ab1-42cc-9d27-7028b4d22e80\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survey_Date</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Region</th>\n",
              "      <th>Industry</th>\n",
              "      <th>Job_Role</th>\n",
              "      <th>Work_Arrangement</th>\n",
              "      <th>Hours_Per_Week</th>\n",
              "      <th>Mental_Health_Status</th>\n",
              "      <th>Burnout_Level</th>\n",
              "      <th>Work_Life_Balance_Score</th>\n",
              "      <th>Physical_Health_Issues</th>\n",
              "      <th>Social_Isolation_Score</th>\n",
              "      <th>Salary_Range</th>\n",
              "      <th>Salary_Category</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2025-06-01</td>\n",
              "      <td>27</td>\n",
              "      <td>Female</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Professional Services</td>\n",
              "      <td>Data Analyst</td>\n",
              "      <td>Onsite</td>\n",
              "      <td>64</td>\n",
              "      <td>Stress Disorder</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>Shoulder Pain; Neck Pain</td>\n",
              "      <td>2</td>\n",
              "      <td>$40K-60K</td>\n",
              "      <td>Entry Level</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2025-06-01</td>\n",
              "      <td>37</td>\n",
              "      <td>Female</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Professional Services</td>\n",
              "      <td>Data Analyst</td>\n",
              "      <td>Onsite</td>\n",
              "      <td>37</td>\n",
              "      <td>Stress Disorder</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>Back Pain</td>\n",
              "      <td>2</td>\n",
              "      <td>$80K-100K</td>\n",
              "      <td>Upper Mid Level</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2025-06-01</td>\n",
              "      <td>32</td>\n",
              "      <td>Female</td>\n",
              "      <td>Africa</td>\n",
              "      <td>Education</td>\n",
              "      <td>Business Analyst</td>\n",
              "      <td>Onsite</td>\n",
              "      <td>36</td>\n",
              "      <td>ADHD</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>Shoulder Pain; Eye Strain</td>\n",
              "      <td>2</td>\n",
              "      <td>$80K-100K</td>\n",
              "      <td>Upper Mid Level</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2025-06-01</td>\n",
              "      <td>40</td>\n",
              "      <td>Female</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Education</td>\n",
              "      <td>Data Analyst</td>\n",
              "      <td>Onsite</td>\n",
              "      <td>63</td>\n",
              "      <td>ADHD</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>Shoulder Pain; Eye Strain</td>\n",
              "      <td>2</td>\n",
              "      <td>$60K-80K</td>\n",
              "      <td>Mid Level</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2025-06-01</td>\n",
              "      <td>30</td>\n",
              "      <td>Male</td>\n",
              "      <td>South America</td>\n",
              "      <td>Manufacturing</td>\n",
              "      <td>DevOps Engineer</td>\n",
              "      <td>Hybrid</td>\n",
              "      <td>65</td>\n",
              "      <td>good</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>No Issuse</td>\n",
              "      <td>4</td>\n",
              "      <td>$60K-80K</td>\n",
              "      <td>Mid Level</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ec894ec2-2ab1-42cc-9d27-7028b4d22e80')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ec894ec2-2ab1-42cc-9d27-7028b4d22e80 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ec894ec2-2ab1-42cc-9d27-7028b4d22e80');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-47dc9cfd-cd65-40b0-934b-8a5ec91f1e57\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-47dc9cfd-cd65-40b0-934b-8a5ec91f1e57')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-47dc9cfd-cd65-40b0-934b-8a5ec91f1e57 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df1",
              "summary": "{\n  \"name\": \"df1\",\n  \"rows\": 3157,\n  \"fields\": [\n    {\n      \"column\": \"Survey_Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"2025-06-09\",\n          \"2025-06-17\",\n          \"2025-06-01\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 22,\n        \"max\": 65,\n        \"num_unique_values\": 44,\n        \"samples\": [\n          45,\n          33,\n          65\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Male\",\n          \"Prefer not to say\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Asia\",\n          \"Africa\",\n          \"North America\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Healthcare\",\n          \"Education\",\n          \"Finance\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Job_Role\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"Data Scientist\",\n          \"Customer Service Manager\",\n          \"Data Analyst\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Work_Arrangement\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Onsite\",\n          \"Hybrid\",\n          \"Remote\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hours_Per_Week\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 35,\n        \"max\": 65,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          56,\n          43,\n          50\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mental_Health_Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Stress Disorder\",\n          \"ADHD\",\n          \"PTSD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Burnout_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Work_Life_Balance_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Physical_Health_Issues\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 32,\n        \"samples\": [\n          \"Back Pain; Shoulder Pain; Neck Pain; Wrist Pain\",\n          \"Eye Strain; Neck Pain\",\n          \"Back Pain; Eye Strain; Neck Pain; Wrist Pain\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Social_Isolation_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary_Range\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"$80K-100K\",\n          \"$120K+\",\n          \"$60K-80K\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary_Category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Upper Mid Level\",\n          \"Executive / Leadership\",\n          \"Mid Level\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to count issues\n",
        "def count_issues(x):\n",
        "    if pd.isna(x) or x.strip().lower() == 'no issue':\n",
        "        return 0\n",
        "    return len([i for i in x.split(';') if i.strip()])\n",
        "\n",
        "# Apply the function to create a new column\n",
        "df1['Physical_Issue_Count'] = df1['Physical_Health_Issues'].apply(count_issues)\n",
        "df1.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "kDHqobNorLsK",
        "outputId": "e4aa7bac-0ad4-4510-8bc7-6ef084b0cec7"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Survey_Date  Age  Gender         Region               Industry  \\\n",
              "0  2025-06-01   27  Female           Asia  Professional Services   \n",
              "1  2025-06-01   37  Female           Asia  Professional Services   \n",
              "2  2025-06-01   32  Female         Africa              Education   \n",
              "3  2025-06-01   40  Female         Europe              Education   \n",
              "4  2025-06-01   30    Male  South America          Manufacturing   \n",
              "\n",
              "           Job_Role Work_Arrangement  Hours_Per_Week Mental_Health_Status  \\\n",
              "0      Data Analyst           Onsite              64      Stress Disorder   \n",
              "1      Data Analyst           Onsite              37      Stress Disorder   \n",
              "2  Business Analyst           Onsite              36                 ADHD   \n",
              "3      Data Analyst           Onsite              63                 ADHD   \n",
              "4   DevOps Engineer           Hybrid              65                 good   \n",
              "\n",
              "   Burnout_Level  Work_Life_Balance_Score     Physical_Health_Issues  \\\n",
              "0              3                        3   Shoulder Pain; Neck Pain   \n",
              "1              3                        4                  Back Pain   \n",
              "2              3                        3  Shoulder Pain; Eye Strain   \n",
              "3              2                        1  Shoulder Pain; Eye Strain   \n",
              "4              2                        5                  No Issuse   \n",
              "\n",
              "   Social_Isolation_Score Salary_Range  Salary_Category  Physical_Issue_Count  \n",
              "0                       2     $40K-60K      Entry Level                     2  \n",
              "1                       2    $80K-100K  Upper Mid Level                     1  \n",
              "2                       2    $80K-100K  Upper Mid Level                     2  \n",
              "3                       2     $60K-80K        Mid Level                     2  \n",
              "4                       4     $60K-80K        Mid Level                     1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-de2b7143-e2e6-4ed2-900a-96ac293f4adb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survey_Date</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Region</th>\n",
              "      <th>Industry</th>\n",
              "      <th>Job_Role</th>\n",
              "      <th>Work_Arrangement</th>\n",
              "      <th>Hours_Per_Week</th>\n",
              "      <th>Mental_Health_Status</th>\n",
              "      <th>Burnout_Level</th>\n",
              "      <th>Work_Life_Balance_Score</th>\n",
              "      <th>Physical_Health_Issues</th>\n",
              "      <th>Social_Isolation_Score</th>\n",
              "      <th>Salary_Range</th>\n",
              "      <th>Salary_Category</th>\n",
              "      <th>Physical_Issue_Count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2025-06-01</td>\n",
              "      <td>27</td>\n",
              "      <td>Female</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Professional Services</td>\n",
              "      <td>Data Analyst</td>\n",
              "      <td>Onsite</td>\n",
              "      <td>64</td>\n",
              "      <td>Stress Disorder</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>Shoulder Pain; Neck Pain</td>\n",
              "      <td>2</td>\n",
              "      <td>$40K-60K</td>\n",
              "      <td>Entry Level</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2025-06-01</td>\n",
              "      <td>37</td>\n",
              "      <td>Female</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Professional Services</td>\n",
              "      <td>Data Analyst</td>\n",
              "      <td>Onsite</td>\n",
              "      <td>37</td>\n",
              "      <td>Stress Disorder</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>Back Pain</td>\n",
              "      <td>2</td>\n",
              "      <td>$80K-100K</td>\n",
              "      <td>Upper Mid Level</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2025-06-01</td>\n",
              "      <td>32</td>\n",
              "      <td>Female</td>\n",
              "      <td>Africa</td>\n",
              "      <td>Education</td>\n",
              "      <td>Business Analyst</td>\n",
              "      <td>Onsite</td>\n",
              "      <td>36</td>\n",
              "      <td>ADHD</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>Shoulder Pain; Eye Strain</td>\n",
              "      <td>2</td>\n",
              "      <td>$80K-100K</td>\n",
              "      <td>Upper Mid Level</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2025-06-01</td>\n",
              "      <td>40</td>\n",
              "      <td>Female</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Education</td>\n",
              "      <td>Data Analyst</td>\n",
              "      <td>Onsite</td>\n",
              "      <td>63</td>\n",
              "      <td>ADHD</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>Shoulder Pain; Eye Strain</td>\n",
              "      <td>2</td>\n",
              "      <td>$60K-80K</td>\n",
              "      <td>Mid Level</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2025-06-01</td>\n",
              "      <td>30</td>\n",
              "      <td>Male</td>\n",
              "      <td>South America</td>\n",
              "      <td>Manufacturing</td>\n",
              "      <td>DevOps Engineer</td>\n",
              "      <td>Hybrid</td>\n",
              "      <td>65</td>\n",
              "      <td>good</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>No Issuse</td>\n",
              "      <td>4</td>\n",
              "      <td>$60K-80K</td>\n",
              "      <td>Mid Level</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de2b7143-e2e6-4ed2-900a-96ac293f4adb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-de2b7143-e2e6-4ed2-900a-96ac293f4adb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-de2b7143-e2e6-4ed2-900a-96ac293f4adb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e7d148d9-d5fb-4e8a-935e-fb8dd0b01f9d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e7d148d9-d5fb-4e8a-935e-fb8dd0b01f9d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e7d148d9-d5fb-4e8a-935e-fb8dd0b01f9d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df1",
              "summary": "{\n  \"name\": \"df1\",\n  \"rows\": 3157,\n  \"fields\": [\n    {\n      \"column\": \"Survey_Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"2025-06-09\",\n          \"2025-06-17\",\n          \"2025-06-01\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 22,\n        \"max\": 65,\n        \"num_unique_values\": 44,\n        \"samples\": [\n          45,\n          33,\n          65\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Male\",\n          \"Prefer not to say\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Asia\",\n          \"Africa\",\n          \"North America\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Healthcare\",\n          \"Education\",\n          \"Finance\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Job_Role\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"Data Scientist\",\n          \"Customer Service Manager\",\n          \"Data Analyst\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Work_Arrangement\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Onsite\",\n          \"Hybrid\",\n          \"Remote\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hours_Per_Week\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 35,\n        \"max\": 65,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          56,\n          43,\n          50\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mental_Health_Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Stress Disorder\",\n          \"ADHD\",\n          \"PTSD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Burnout_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Work_Life_Balance_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Physical_Health_Issues\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 32,\n        \"samples\": [\n          \"Back Pain; Shoulder Pain; Neck Pain; Wrist Pain\",\n          \"Eye Strain; Neck Pain\",\n          \"Back Pain; Eye Strain; Neck Pain; Wrist Pain\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Social_Isolation_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary_Range\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"$80K-100K\",\n          \"$120K+\",\n          \"$60K-80K\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary_Category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Upper Mid Level\",\n          \"Executive / Leadership\",\n          \"Mid Level\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Physical_Issue_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Bar Chart of Burnout Level**"
      ],
      "metadata": {
        "id": "NvbmKlpkJxk7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "bar_x = df['Burnout_Level'].value_counts()\n",
        "x = bar_x.index\n",
        "y = bar_x.values\n",
        "\n",
        "plt.bar(x, y, width = 0.1)\n",
        "plt.xlabel('Count')\n",
        "plt.ylabel('Burnout Level')\n",
        "plt.title('Distribution of Burnout Levels')\n",
        "\n",
        "print(bar_x)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 559
        },
        "id": "6Oqc51NkKENO",
        "outputId": "c68e2caa-ddc8-4b2a-e323-5645098fda55",
        "collapsed": true
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Burnout_Level\n",
            "Medium    1366\n",
            "High      1046\n",
            "Low        745\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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N27caEgy6tWrZ2RlZZnt7733niHJeOWVV8y2oKAgIyoq6m+3ebnaoqKijKCgIHN51apVhiRjxowZduPuvfdew2azGYcOHTLbJBlubm52bbt27TIkGfPmzSuyr7+aM2eOIcl4++23zbZz584ZoaGhRrVq1eyOPSgoyIiIiLjs9v46VlKRV/v27Y3ffvvNbuyF71OhC9+Tw4cPG5IMLy8vIy0tzW5s4c/K4MGD7drvvvtuo1atWuZyYmKiIckYMmSI3bgnnnjCkGRs2LDBbJNkTJky5aLH9tc/7/fff9+QZGzcuPES74a9wlov93PcrVs3o2XLlkZOTo7ZVlBQYNxyyy1GkyZNzLYJEyYYrq6uRnp6utmWm5tr+Pj42L0X0dHRRt26dYu89/379ze8vb2N7OxswzD+7z0u/Bk9deqUIcl48cUXi3VsgGEYBpfMgKtUrVq1y95t5uPjI0n6+OOPr3gCsru7ux566KFijx84cKCqV69uLt97772qW7euPv/88yvaf3F9/vnncnZ21mOPPWbXPmbMGBmGoS+++MKuPSwsTI0aNTKXW7VqJS8vL/38889/ux9/f3/df//9Zpurq6see+wxnTlzRps3b77iY2jXrp3i4uIUFxen1atX69lnn9W+fft011136Y8//rji7fbp0+eSZ6cefvhhu+Vbb71Vv//+u7KysiTJ/HMbPXq03bjCs16fffbZFdflKOnp6dqwYYP69u2r06dP67ffftNvv/2m33//XeHh4UpKStLx48clSf369VNeXp4+/PBDc/1169YpIyND/fr1k/Tn2caVK1eqZ8+eMgzD3N5vv/2m8PBwZWZmaufOnRetpUqVKnJzc9OmTZt06tSp0j94/CMQiICrdObMGbvwcaF+/fqpffv2GjJkiPz8/NS/f3+99957JQpH9erVK9EE3Asn/tpsNjVu3LjU508cPXpUAQEBRd6PwksxR48etWuvX79+kW3UqFHjb3+JHT16VE2aNJGTk/1fYZfaT0nUrl1bYWFhCgsLU0REhCZOnKjXX39d3377rV5//fUr3u7lLrdd+D7UqFFDksz34ejRo3JyclLjxo3txvn7+8vHx+eqjtdRDh06JMMwNGnSJNWpU8fuVXiHX1pamiSpdevWatasmVasWGGuv2LFCtWuXVtdu3aVJP3666/KyMjQokWLimyv8B8Hhdu7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VlaWAgMDlZycLC8vr3KrA/gn4XMFlI6K8NkyDEOnT59WQEDA3461RCByc3PTDTfcoPXr16t3796S/gw569ev1/Dhw4uMd3d3l7u7u12bj49PGVRaPF5eXvzFDTgYnyugdJT3Z+vvzgwVskQgkqTRo0crKipKbdu21U033aQ5c+bo7Nmzeuihh8q7NAAAUM4sE4j69eunX3/9VZMnT1ZKSoratGmjNWvWFJloDQAArMcygUiShg8fftFLZJWFu7u7pkyZUuRyHoArx+cKKB2V7bNlM4pzLxoAAMA/mCUezAgAAHA5BCIAAGB5BCIAAGB5BKJKYNOmTbLZbMrIyJAkLVmypEI9FwmoTK7k8zNo0CDzGWYA/pkIRA4waNAg2Ww2Pfzww0X6YmJiZLPZNGjQIIftr1+/fvrxxx8dtj3gn+JSweWv/6jg8wNcuX/yPw4IRA4SGBiod999V3/88YfZlpOTo3feeUf169d36L6qVKkiX19fh24TsAo+PwAuhkDkINdff70CAwP14Ycfmm0ffvih6tevr+uuu85sKygoUGxsrBo0aKAqVaqodevW+uCDD+y29fnnn+tf//qXqlSpoi5duujIkSN2/Ree8r9YYh85cqQ6d+5sLnfu3FkjRozQyJEjVaNGDfn5+em1114zn9ZdvXp1NW7cWF988cVVvxdARXaxS2YzZsyQr6+vqlevriFDhmj8+PFq06ZNkXVfeukl1a1bV7Vq1VJMTIzy8vLKpmigEti8ebNuuukmubu7q27duho/frzOnz8vSVq9erV8fHyUn58vSUpMTJTNZtP48ePN9YcMGaIHH3ywXGqXCEQONXjwYC1evNhcfvPNN4t8NUhsbKyWLVumhQsXat++fRo1apQefPBBbd68WZKUnJyse+65Rz179lRiYqL5l7MjLF26VLVr19a2bds0YsQIPfLII7rvvvt0yy23aOfOnbr99ts1YMAAZWdnO2R/QGWwfPlyPfvss3rhhReUkJCg+vXra8GCBUXGbdy4UT/99JM2btyopUuXasmSJVqyZEnZFwxUQMePH1ePHj104403ateuXVqwYIHeeOMNzZgxQ5J066236vTp0/r+++8l/RmeateurU2bNpnb2Lx5s90/5MucgasWFRVl9OrVy0hLSzPc3d2NI0eOGEeOHDE8PDyMX3/91ejVq5cRFRVl5OTkGFWr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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Pie Chart of Health issues** *ข้อความตัวเอียง*"
      ],
      "metadata": {
        "id": "RvWm2c2PIZSv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Pie_chart = df['Mental_Health_Status'].value_counts()\n",
        "labels = Pie_chart.index\n",
        "sizes = Pie_chart.values\n",
        "\n",
        "plt.pie(sizes, labels=labels)\n",
        "plt.title('Mental Health Status')\n",
        "plt.legend()\n",
        "plt.axis('equal')\n",
        "\n",
        "print(Pie_chart)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "73mQTN9YIryx",
        "outputId": "080187b7-612e-4e38-ecbb-2ac86b5ce4be",
        "collapsed": true
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mental_Health_Status\n",
            "PTSD               423\n",
            "Anxiety            394\n",
            "Burnout            392\n",
            "Depression         386\n",
            "ADHD               385\n",
            "Stress Disorder    378\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Pie Chart of Work arrengement**"
      ],
      "metadata": {
        "id": "RTe8LPWZMQqu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Pie_chart2 = df['Work_Arrangement'].value_counts()\n",
        "labels = Pie_chart2.index\n",
        "sizes = Pie_chart2.values\n",
        "\n",
        "plt.pie(sizes, labels=labels)\n",
        "plt.title('Work Arrangements')\n",
        "plt.legend()\n",
        "plt.axis('equal')\n",
        "\n",
        "print(Pie_chart2)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 515
        },
        "id": "2bOnWqP3MkS4",
        "outputId": "e18d5330-dbfe-4160-e240-716b32434db9",
        "collapsed": true
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Work_Arrangement\n",
            "Onsite    1562\n",
            "Hybrid    1007\n",
            "Remote     588\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Pie chart for industy**"
      ],
      "metadata": {
        "id": "-3sFHcigXpBa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Pie_chart3 = df['Industry'].value_counts()\n",
        "labels = Pie_chart3.index\n",
        "sizes = Pie_chart3.values\n",
        "\n",
        "plt.pie(sizes, labels=labels)\n",
        "plt.title('Industry')\n",
        "plt.legend()\n",
        "plt.axis('equal')\n",
        "\n",
        "print(Pie_chart3)\n",
        "plt.show"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 792
        },
        "id": "TlN1VdPyYQd5",
        "outputId": "abb08157-dedd-4755-c1f3-20286715a01a",
        "collapsed": true
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Industry\n",
            "Professional Services    730\n",
            "Technology               593\n",
            "Manufacturing            370\n",
            "Finance                  367\n",
            "Education                287\n",
            "Healthcare               247\n",
            "Marketing                202\n",
            "Retail                   188\n",
            "Customer Service         173\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show(close=None, block=None)>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.12/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "block : bool, optional\n",
              "    Whether to wait for all figures to be closed before returning.\n",
              "\n",
              "    If `True` block and run the GUI main loop until all figure windows\n",
              "    are closed.\n",
              "\n",
              "    If `False` ensure that all figure windows are displayed and return\n",
              "    immediately.  In this case, you are responsible for ensuring\n",
              "    that the event loop is running to have responsive figures.\n",
              "\n",
              "    Defaults to True in non-interactive mode and to False in interactive\n",
              "    mode (see `.pyplot.isinteractive`).\n",
              "\n",
              "See Also\n",
              "--------\n",
              "ion : Enable interactive mode, which shows / updates the figure after\n",
              "      every plotting command, so that calling ``show()`` is not necessary.\n",
              "ioff : Disable interactive mode.\n",
              "savefig : Save the figure to an image file instead of showing it on screen.\n",
              "\n",
              "Notes\n",
              "-----\n",
              "**Saving figures to file and showing a window at the same time**\n",
              "\n",
              "If you want an image file as well as a user interface window, use\n",
              "`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n",
              "``show()`` the figure is closed and thus unregistered from pyplot. Calling\n",
              "`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n",
              "limitation of command order does not apply if the show is non-blocking or\n",
              "if you keep a reference to the figure and use `.Figure.savefig`.\n",
              "\n",
              "**Auto-show in jupyter notebooks**\n",
              "\n",
              "The jupyter backends (activated via ``%matplotlib inline``,\n",
              "``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n",
              "the end of every cell by default. Thus, you usually don&#x27;t have to call it\n",
              "explicitly there.</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 569);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Average work hours per week**"
      ],
      "metadata": {
        "id": "ruQgV0nJuWpo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "result = df1.groupby('Industry')['Hours_Per_Week'].mean()\n",
        "gender = df1.groupby('Gender')['Hours_Per_Week'].mean()\n",
        "print(round(result,2),\"\\n\")\n",
        "print(round(gender, 2))\n",
        "\n"
      ],
      "metadata": {
        "id": "8-rTD67AenLX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "db81b8a1-a385-4b63-aff0-b6d1edc3464e"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Industry\n",
            "Customer Service         49.96\n",
            "Education                50.41\n",
            "Finance                  49.95\n",
            "Healthcare               50.23\n",
            "Manufacturing            49.59\n",
            "Marketing                50.24\n",
            "Professional Services    50.06\n",
            "Retail                   49.59\n",
            "Technology               49.47\n",
            "Name: Hours_Per_Week, dtype: float64 \n",
            "\n",
            "Gender\n",
            "Female               49.82\n",
            "Male                 49.95\n",
            "Non-binary           50.56\n",
            "Prefer not to say    49.50\n",
            "Name: Hours_Per_Week, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result2 = df.groupby('Industry')['Work_Life_Balance_Score'].mean()\n",
        "gender2 = df.groupby('Gender')['Work_Life_Balance_Score'].mean()\n",
        "\n",
        "\n",
        "print(round(result2,2))\n",
        "print(round(gender2, 2))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b200c3e8-dd65-415c-dcb0-6064642f8864",
        "collapsed": true,
        "id": "eXwtyymu2dHS"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Industry\n",
            "Customer Service         3.05\n",
            "Education                3.06\n",
            "Finance                  2.96\n",
            "Healthcare               2.94\n",
            "Manufacturing            2.90\n",
            "Marketing                3.09\n",
            "Professional Services    3.01\n",
            "Retail                   3.16\n",
            "Technology               2.96\n",
            "Name: Work_Life_Balance_Score, dtype: float64\n",
            "Gender\n",
            "Female               3.02\n",
            "Male                 2.97\n",
            "Non-binary           3.14\n",
            "Prefer not to say    2.84\n",
            "Name: Work_Life_Balance_Score, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result3 = df.groupby('Industry')['Social_Isolation_Score'].mean()\n",
        "result4 = df['Social_Isolation_Score'].mean()\n",
        "\n",
        "print(\"Mean of Social Islation score\\n\",round(result4,2),\"\\n\")\n",
        "print(round(result3,2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dbbb4c1a-a1c7-4c43-a5ad-c71ab882b239",
        "collapsed": true,
        "id": "i-wXwCIdAr-a"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean of Social Islation score\n",
            " 2.7 \n",
            "\n",
            "Industry\n",
            "Customer Service         2.71\n",
            "Education                2.70\n",
            "Finance                  2.76\n",
            "Healthcare               2.60\n",
            "Manufacturing            2.80\n",
            "Marketing                2.54\n",
            "Professional Services    2.66\n",
            "Retail                   2.70\n",
            "Technology               2.78\n",
            "Name: Social_Isolation_Score, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# This dataframe has 244 lines, but 4 distinct values for `day`\n",
        "df = px.data.tips()\n",
        "fig = px.pie(Pie_chart, values= Pie_chart.values, names=Pie_chart.index, color_discrete_sequence=px.colors.sequential.RdBu)\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "WWTgxUZjtLdr",
        "outputId": "6968a92b-995d-40df-e23f-ef6a24e3e99d",
        "collapsed": true
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"742780f5-9969-4bfd-9a3c-343f0e1a5f26\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"742780f5-9969-4bfd-9a3c-343f0e1a5f26\")) {                    Plotly.newPlot(                        \"742780f5-9969-4bfd-9a3c-343f0e1a5f26\",                        [{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"hovertemplate\":\"Mental_Health_Status=%{label}\\u003cbr\\u003evalue=%{value}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"labels\":[\"PTSD\",\"Anxiety\",\"Burnout\",\"Depression\",\"ADHD\",\"Stress Disorder\"],\"legendgroup\":\"\",\"name\":\"\",\"showlegend\":true,\"values\":[423,394,392,386,385,378],\"type\":\"pie\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"piecolorway\":[\"rgb(103,0,31)\",\"rgb(178,24,43)\",\"rgb(214,96,77)\",\"rgb(244,165,130)\",\"rgb(253,219,199)\",\"rgb(247,247,247)\",\"rgb(209,229,240)\",\"rgb(146,197,222)\",\"rgb(67,147,195)\",\"rgb(33,102,172)\",\"rgb(5,48,97)\"]},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('742780f5-9969-4bfd-9a3c-343f0e1a5f26');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}